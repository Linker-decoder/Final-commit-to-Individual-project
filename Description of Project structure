Веб-сайт(сервер) на Spring с использованием свободной объектно-реляционной системы управления базами данных (СУБД)
PostgreSQL с выполненным фронтендом на (+-) React [JavaScript-библиотека с открытым исходным кодом для разработки пользовательских интерфейсов.]
Данный проект представляет собой онлайн-приложение To-Do-List

Todolist — это приложение для управления задачами, которое помогает пользователям организовывать свои дела и повышать продуктивность. 
С его помощью можно создавать списки задач, устанавливать приоритеты и сроки выполнения, а также отслеживать прогресс. 
В современном мире, где информация и задачи поступают с невероятной скоростью, такие приложения становятся незаменимыми помощниками. 
Todolist позволяет пользователям структурировать свои задачи, что особенно полезно для тех, кто работает в условиях многозадачности или имеет плотный график. 
Приложение помогает избежать забывчивости и хаоса, предоставляя удобные инструменты для планирования и контроля.

Основная функция Todolist — это создание и управление задачами. Пользователи могут:

1) Создавать задачи: Вводить название задачи, описание и устанавливать сроки выполнения. Это позволяет детально планировать свои дела и не упускать важные детали.
2) Устанавливать приоритеты: Присваивать задачам высокий, средний или низкий приоритет. Это помогает сосредоточиться на наиболее важных делах и эффективно распределять свое время.
3) Создавать подзадачи: Разбивать крупные задачи на более мелкие шаги. Это делает выполнение сложных проектов более управляемым и позволяет отслеживать прогресс на каждом этапе.
4) Устанавливать дедлайны для понимания времени, до которого нужно осуществить задуманное

На текущий момент данный To-Do-List предоставляет следующие возможности:

1. Можно регистрироваться;
2. можно логиниться;
3. можно создавать дела;
4. можно ставить дедлайны; 
5. можно отмечать дела как выполненные;
6. можно редактировать дела и дедлайны;

Весь Java код находится в пакете toDoList.src.main.java.com.todolist.todolist
Внутри этого пакета есть 
Следующие Java классы:
I. ToDoListApplication.java 
II. SecurityConfig.java
III. UserDetailsImplementation.java

А также
следующие пакеты:
1. Models
2. Controllers
3. Exceptions
4. Repositories
5. Services

-------------------------------------------------------------------------------------------------------------------------------------------
I. ToDoListApplication.java это просто класс с методом main, в котором вызывается метод SpringApplication.run, который запускает программу
-------------------------------------------------------------------------------------------------------------------------------------------

1. В пакете Models находятся 2 класса:

1)ToDoItem.java
2)User.java
Пакет называется model не просто так, это почти что паттерн mvc с пассивной моделью, то есть эти 2 класса представляют собой просто хранилища данных. Аннотация @Data из Lombok добавляет нужные конструкторы и геттеры
@Entity - говорит, что этот класс, это элемент из базы данных
@Table - говорит к какой таблице из базы данных относится этот класс

2. Пакет controllers:
Каждый класс отвечает за определенный url(например класс HomeController, у него есть несколько методов с аннотацией @ReauestMapping("...") этот метод будет вызываться,  когда пользователь перешёл по такому url: ...
Аннотация @RestController ставится над каждым классом, который реализует такую логику.
Аннотация @Autowired автоматические подставляет нужный нам класс, который до этого нужно было пометить как @Service или @Controller или @Bean или ещё как-то(можно почитать про это: IOC container spring)
Возвращаемое значение ModelAndView это фактически вывод html

3. Пакет Exceptions - это мои кастомные исключения

4. Пакет Repositories - предназначается для доступа к базе данных
UserRepository для доступа к базе данных Usera(там есть методы доступа по почте, логину и т.д.)\
ToDoItemRepository для доступа к базе данных ToDoItema

5. В пакете Services есть todoitemservice и userservice, это как бы прослойка между программистом и репоситорием,
с помощью этих классов можно удалить и добавить элемент в базу данных и т.д.

----------------------------------------------------------------------------------------------------------------------------
III. UserDetailsImplementation тоже своего рода прослойка, даёт доступ к данным пользователя типо getpassword и getusername
----------------------------------------------------------------------------------------------------------------------------

---------------------------------------------
II. Userconfig - самая сложная часть
---------------------------------------------

private UserService userService;

public class SecurityConfig {

@Autowired
public void setUserService(UserService userService) {
    this.userService = userService;
}

@Bean
public PasswordEncoder passwordEncoder(){
    return new BCryptPasswordEncoder();
}

@Bean
public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception{
    return authenticationConfiguration.getAuthenticationManager();
}

@Bean
@Primary
AuthenticationManagerBuilder configureAuthenticationManagerBuilder(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {
    authenticationManagerBuilder.userDetailsService(userService).passwordEncoder(passwordEncoder());
    return authenticationManagerBuilder;
}

@Bean
public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    http
            .csrf(AbstractHttpConfigurer::disable)
            .cors(httpSecurityCorsConfigurer ->
                    httpSecurityCorsConfigurer
                            .configurationSource(request ->
                                    new CorsConfiguration().applyPermitDefaultValues())
            )
            .exceptionHandling(exceptions ->
                    exceptions.authenticationEntryPoint((request, response, authException) -> response.sendRedirect("/auth/create_signin"))
            )
            .sessionManagement(session ->
                    session.sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)
            )
            .authorizeHttpRequests(authorize -> authorize
                    .requestMatchers("/auth/**").permitAll()
                    .requestMatchers("/").permitAll()
                    .requestMatchers("/secured/user").fullyAuthenticated()
                    .requestMatchers("/home").fullyAuthenticated()
                    .requestMatchers("/create-todo").fullyAuthenticated()
                    .requestMatchers("/todo/**").fullyAuthenticated()
                    .anyRequest().permitAll()
            ).formLogin(login -> login.loginPage("/auth/signin").defaultSuccessUrl("/home").failureUrl("/auth/create_wrongsignin"));
    return http.build();
}


1).@Configuration
@EnableWebSecurity
@NoArgsConstructor

Этот код представляет собой конфигурацию безопасности для веб-приложения на основе Spring Security. Давайте разберем его по частям:

Аннотации:
    @Configuration: Указывает, что класс содержит методы конфигурации Spring.
    @EnableWebSecurity: Включает поддержку безопасности веб-приложений.
    @NoArgsConstructor: Генерирует конструктор без параметров.

2)
Пользовательский сервис:

private UserService userService;
@Autowired
public void setUserService(UserService userService) {
    this.userService = userService;
}

Здесь используется UserService, который, вероятно, отвечает за управление пользователями, и он внедряется через метод setUserService.

3) 
Шифрование паролей:

private UserService userService;

@Autowired
public void setUserService(UserService userService) {
    this.userService = userService;
}

Это бин для шифрования паролей с использованием алгоритма BCrypt.

4)
Менеджер аутентификации:

@Bean
public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception{
    return authenticationConfiguration.getAuthenticationManager();
}

Создается бин для менеджера аутентификации.

5)
Конфигурация менеджера аутентификации:

@Bean
@Primary
AuthenticationManagerBuilder configureAuthenticationManagerBuilder(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {
    authenticationManagerBuilder.userDetailsService(userService).passwordEncoder(passwordEncoder());
    return authenticationManagerBuilder;
}

Здесь AuthenticationManagerBuilder настраивается для использования UserService и шифрования паролей.

6)
Цепочка фильтров безопасности:

@Bean
public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    // Конфигурация HTTP безопасности
}

Основная часть кода, где настраивается безопасность приложения:

   - CSRF и CORS: Защита от CSRF (Cross-Site Request Forgery) отключена, а CORS (Cross-Origin Resource Sharing) настраивается для разрешения определенных источников.
   - Обработка исключений: Пользователь перенаправляется на страницу входа при ошибках аутентификации.
   - Управление сессиями: Устанавливается политика создания сессий.
   - Авторизация запросов:
      .  Публичные маршруты: /auth/** и / доступны всем.
      .  Защищенные маршруты: /secured/user, /home, /create-todo и /todo/** требуют аутентификации.
      .  Все остальные запросы разрешены для неаутентифицированных пользователей.
   - Форма входа: Устанавливаются страницы для входа и перенаправления после успешной аутентификации.

Заключение

Этот класс конфигурации обеспечивает безопасность веб-приложения, управляя аутентификацией и авторизацией пользователей, а также конфигурируя обработку CORS и CSRF.

